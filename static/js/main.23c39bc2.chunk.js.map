{"version":3,"sources":["style/theme.js","components/App/app.js","components/Main/main.js","components/PaymentHistoryCard/payment-history-card.js","components/PayNowCard/pay-now-card.js","components/DateInfo/date-info.js","serviceWorker.js","index.js"],"names":["theme","responsiveFontSizes","createMuiTheme","palette","divider","grey","secondary","main","pink","background","paper","App","ThemeProvider","CssBaseline","Box","pt","clone","Grid","container","direction","alignItems","Typography","variant","gutterBottom","Main","useState","debt","setDebt","payments","setPayments","handleSubmit","useCallback","v","console","log","useEffect","id","amount","requested","_seconds","Date","valueOf","finalized","Container","maxWidth","px","mb","textAlign","align","color","component","mt","item","xs","Divider","spacing","wrap","map","payment","key","memo","border","Paper","py","borderBottom","borderRight","label","date","justify","payAmount","setPayAmount","Math","min","ceil","Slider","onChange","_","value","max","Button","style","borderTopLeftRadius","borderTopRightRadius","fullWidth","onClick","toLocaleDateString","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.23c39bc2.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport { grey, pink } from '@material-ui/core/colors';\r\n\r\nconst theme = responsiveFontSizes(\r\n  createMuiTheme({\r\n    palette: {\r\n      divider: grey[500],\r\n      secondary: {\r\n        main: pink[500],\r\n      },\r\n      background: {\r\n        paper: grey[200],\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nexport default theme;\r\n","import React from 'react';\nimport { theme } from 'style';\nimport { Main } from 'components';\nimport {\n  ThemeProvider,\n  CssBaseline,\n  Grid,\n  Typography,\n  Box,\n} from '@material-ui/core';\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <Box pt={4} clone>\n      <Grid container direction={'column'} alignItems={'center'}>\n        <Typography variant={'h1'} gutterBottom>\n          G-Pay\n        </Typography>\n        <Main />\n      </Grid>\n    </Box>\n  </ThemeProvider>\n);\n\nexport default App;\n","import React, { useState, useEffect, useCallback } from 'react';\n// import { socket } from 'services';\nimport { PayNowCard, PaymentHistoryCard } from 'components';\nimport { Container, Grid, Typography, Divider, Box } from '@material-ui/core';\n\nconst Main = () => {\n  const [debt, setDebt] = useState(0);\n  const [payments, setPayments] = useState([]);\n\n  const handleSubmit = useCallback(v => {\n    console.log(v);\n  }, []);\n\n  useEffect(() => {\n    setPayments([\n      {\n        id: '1',\n        amount: 50,\n        requested: { _seconds: new Date().valueOf() / 1000 },\n        finalized: { _seconds: new Date().valueOf() / 1000 },\n      },\n      {\n        id: '2',\n        amount: 50,\n        requested: { _seconds: new Date().valueOf() / 1000 },\n        finalized: { _seconds: new Date().valueOf() / 1000 },\n      },\n    ]);\n\n    setDebt(200);\n\n    // Will unmock later\n    // socket.on('PAYMENTS_FETCHED', payload => {\n    //   setPayments(payload);\n    // });\n\n    // socket.on('DEBT_FETCHED', payload => {\n    //   setDebt(payload);\n    // });\n\n    // socket.emit('FETCH_PAYMENTS');\n    // socket.emit('FETCH_DEBT');\n  }, []);\n\n  return (\n    <Container maxWidth={'xs'}>\n      <Box px={2} mb={2} textAlign={'center'}>\n        <Typography\n          align={'center'}\n          color={'textSecondary'}\n          variant={'h4'}\n          component={'span'}\n        >\n          Remaining:&nbsp;\n        </Typography>\n        <Typography variant={'h3'} component={'span'}>\n          {debt}€\n        </Typography>\n      </Box>\n      <PayNowCard debt={debt} handleSubmit={handleSubmit} />\n      <Box mt={4} mb={4}>\n        <Grid container alignItems={'center'}>\n          <Grid item xs>\n            <Divider />\n          </Grid>\n          <Box px={2} clone>\n            <Grid item>\n              <Typography align={'center'} variant={'h5'}>\n                History\n              </Typography>\n            </Grid>\n          </Box>\n          <Grid item xs>\n            <Divider />\n          </Grid>\n        </Grid>\n      </Box>\n      <Grid container direction={'column'} spacing={2} wrap={'nowrap'}>\n        {payments.map(payment => (\n          <Grid key={payment.id} item>\n            <PaymentHistoryCard payment={payment} />\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Main;\n","import React, { memo } from 'react';\nimport { DateInfo } from 'components';\nimport { Paper, Grid, Typography, Box } from '@material-ui/core';\n\nconst PaymentHistoryCard = ({\n  payment: { amount = 0, requested = {}, finalized = {} } = {},\n}) => (\n  <Box border={1} clone>\n    <Paper>\n      <Box py={1} px={2} borderBottom={1}>\n        <Typography align={'center'} variant={'h4'}>\n          {amount}€\n        </Typography>\n      </Box>\n      <Grid container>\n        <Box borderRight={1} clone>\n          <Grid item xs>\n            <DateInfo label={'Requested'} date={requested} />\n          </Grid>\n        </Box>\n        <Grid container item xs justify={'center'} alignItems={'center'}>\n          <DateInfo label={'Accepted'} date={finalized} />\n        </Grid>\n      </Grid>\n    </Paper>\n  </Box>\n);\n\nexport default memo(PaymentHistoryCard);\n","import React, { useState, useEffect, memo } from 'react';\nimport { Paper, Button, Grid, Typography, Box, Slider } from '@material-ui/core';\n\nconst PayNowCard = ({ debt, handleSubmit }) => {\n  const [payAmount, setPayAmount] = useState(debt);\n\n  useEffect(() => {\n    setPayAmount(Math.min(50, Math.ceil(debt / 2)));\n  }, [debt]);\n\n  const handleChange = (_, v) => {\n    setPayAmount(v);\n  };\n\n  const handleClick = () => {\n    handleSubmit(payAmount);\n  };\n\n  return (\n    <Box border={1} clone>\n      <Paper>\n        <Box py={1} px={2} borderBottom={1}>\n          <Typography color={'secondary'} align={'center'} variant={'h3'}>\n            {payAmount}€\n          </Typography>\n          <Slider\n            onChange={handleChange}\n            value={payAmount}\n            color={'secondary'}\n            min={1}\n            max={200}\n          />\n        </Box>\n        <Grid container>\n          <Grid container item xs justify={'center'} alignItems={'center'}>\n            <Button\n              style={{\n                borderTopLeftRadius: 0,\n                borderTopRightRadius: 0,\n              }}\n              fullWidth\n              variant={'contained'}\n              color={'primary'}\n              onClick={handleClick}\n            >\n              Pay\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default memo(PayNowCard);\n","import React, { memo } from 'react';\nimport { Typography, Box } from '@material-ui/core';\n\nconst DateInfo = ({ label, date }) => (\n  <Box py={1} px={2}>\n    <Typography align={'center'} color={'textSecondary'}>\n      {label}\n    </Typography>\n    <Typography align={'center'}>\n      {date ? new Date(date._seconds * 1000).toLocaleDateString() : 'Invalid Date'}\n    </Typography>\n  </Box>\n);\n\nexport default memo(DateInfo);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}